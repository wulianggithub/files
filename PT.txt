第2章 基本概念！
49
2.1
性能测试的基本概念
随着互联网的蓬勃发展，软件的性能测试已经越来越受到软件开发商和用户的重视。
例如
一个网站初始运营，随着用户的逐步增长，软件的使用者可能会成几倍、几十倍甚至
几百倍数量级的增长，如果不经过性能测试，通常软件系统都会崩溃掉，所以性能测试是
非常重要的。那么什么是性能测试，它包括哪些测试内容？通常在什么情况下需要引入性
能测试呢？
2.1.1
性能测试的概念及其分类
软件系统的性能是一个很大的概念，覆盖面非常广泛，对一个软件系统而言，包括执行
效率、资源占用、系统稳定性、安全性、兼容性、可靠性、可扩展性等。性能测试是为描述
测试对象与性能相关的特征，并对其进行评价而实施和执行的一类测试。它主要通过自动化
的测试工具模拟多种正當、峰值以及是常负载条件来对系统的各项性能指标进行测试。通常
大家把负载测试、压力测试等统称为性能测试。
负载测试：通过逐步增加系统负载，测试系统性能的变化，并最终确定在满足系统
的性能指标情況下，系统所能够承受的最大负载量。简而言之，负载测试是通过逐步加压的
方式来确定系统的处理能力，确定系统能够承受的各项國值。例如，逐步加压，从而得到“响
应时间不超过 10s”，“服务器平均 CPU 利用率低于 85%”等指标的國值。
•
压力测试：通过逐步增加系统负载，测试系统性能的变化，并最终确定在什么负载
条件下系统性能处于失效状态，并获得系统能提供的最大服务级别。压力测试是逐步增加负
载，使系统某些资源达到饱和甚至失效的测试
其他的性能测试分类为。
•
配置测试：主要是通过对被测试软件的软、硬件配置的测试，找到系统各项资源的
最优分配原则。
并发测试：测试多个用户同时访问同一个应用、同一个模块或者数据记录时是否存
在死锁或者其他性能问题，几乎所有的性能测试都会涉及一些并发测试。
容量测试：测试系统能够处理的最大会话能力，确定系统可处理同时 在线的最大用
户数，通常和数据库有关。
可靠性测试：通过给系统加载一定的业务压力(如 CPU 资源在 70%～90%的使用率）
的情况下，运行一段时间，检查系统是否稳定。因为运行时间较长，通常可以测试出系统是
否有内存泄漏等问题。
•
失败测试：对于有冗余备份和负载均衡的系统，通过这样的测试来检验如果系统局
部发生故障，用户是否能够继续使用系统，用户受到多大的影响，如几台机器做均衡负载，



50第一部分
基础篇
测试一合或几合机器垮掉后，系统能能承受的压力。
2.1.2 典型的性能测试场景
下面是
一些需要进行性能测试的场景。
•
用户提出性能测试语求，例如，网站首页面响应时间在 3s 内，主要的业务操作时间
小于10s，支持300用户在线操作等相关语言描述。
某个软件产品要发布了，需要对用户做集中培训。通常在进行培训的时候，老师讲
解完成一个业务以后，被培训用户会按照老师讲解的实例同步操作前面讲过的业务。这样存
在用户并发的问题。在培训之前需要考虑被培训用户的人数，以便在场景中设计合理的并发
用户数量。
同一系统可以采用两种构架 Java、 NET，决定用哪个。因同样的系统用不同的语言
框架实现效果会有所不同。为了系统能够有更好的性能，在系统实现前期，可以考虑设计
个小的 Demo 实例，设计同样的场景，实际考察不同语言、不同框架之问的性能差异，以决
定选择性能好的语言、框架开发软件产品：
•
编码完成，总觉得某部分存在性能问题，但是又说不清楚到底是什么地方存在性能
瓶颈。
一个优秀软件系统是需要开发、测试人员以及数据管理员、系统管理员等角色协同工
作才能完成的。开发人员遇到性能问题以后会提出需求，性能测试人员需要设计相应的场景,
分析系统瓶颈，定位出问题以后，将分析后的测试结果以及意见反馈给开发等相关人员，作
为开发等相关人员做相应调整的依据，调整以后，再次进行同环境、同场景的测试，直到使
系统能够达到预期的目标。
•
决定门户网站能够支持多少用户并发操作(注册、写博客、看照片、灌水⋯⋯)。
个门户网站应该是经得起考验的。门户网站栏日众多，在进行性能测试的时候，应该考虑实
际用户应用的场景，将注册用户、 写博客、看照片、看新闻等用户操作设计成相应的场景，
根据预期的用户量设计相应用户的并发量。
一个好的网站随着用户的逐渐增长以及推广的深
入，访问量可能会成数量级的增长。考虑门户网站这些方面的特点，在进行性能测试的时候
也需要考虑可靠性测试、失败测试以及安全性测试等。
2.1.3
性能测试工具的引入
综上所述，性能测试可以说是软什测试的重中之重。它包括的种类、范围也很广，掌握
并灵活应用一个性能测试工具是软件企业必经之路。日前，市场上已经有很多性能测试工具，
如商业的工具主要有 L.oadRumner、WebLood、Rational Performance Tester （RPT)等，免费
的工具主要包括 Jmeter、 Microsoft web Application Stress Tool、OpenSTA 等。在这些工具中，
LoadRumer 以其界面友好、方便易用、文持协议众多、功能强大等优势，吸引了很多用户






。
】第一部分
𣁦碰篇
1.4 软件测试的分类
软件河试技照测动阶段、是否运行程序、是否查看源代码以及其他方式，可以用图 141
来描述软件测试的各种分类：
RE ME IN EA
图1-1 测试的各种分类结构图
1.4.1 黑盒测试、白盒测试与灰盒测试
黑盒测试
黑盒测试 （Black-box Testing)，软件测试的主要方法之一，也可以称为功能测试、数据
驱动测试或基于规格说明的测试。测试者不了解程序的内部情况，只知道程序的输入、输出
和系统的功能，这是从用户的角度对程序进行的测试。软件的黑盒测试意味着测试要在软件
的接口处进行。这种方法是把测试对象看做一个黑盒子，测试人员完全不考虑程序内部的逻
辑结枃和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。
第1章软件测试概述
黑盒测试的随机性比较大，在大部分案例执行完成以后，大概能够测试40%的功能。据
美国一个官万的数据说，20%的问题是在开发过程中发现的：80%的问题是在系统测试和集
成测试过程中发现的，其中80%的比例我们还是需要在细分，20%的是使用的问题，20%是
程序的问题，5%逻特问题，剩下的都是莫名其妙的问题。这样的数据对测试的一个引导是：
要想发现更多的问题，需要更多的思考，更多的组合。这样增加了很多工作量，人们在疲惫
的执行着测试用例，渴望从中发现新的问题。
这样的用例设计思想使得我们在开发一个大型的产品或者延续性产品的时候，整个测试
用例的延续性很差，重用性也很差。所以我们在这里需要纠正一个概念，黑盒测试不是简单
的使用，用例设计也不是无谓的组合。
那么如何设计好的测试用例呢？如何在开发过程中很好地结合 2/8 原则呢？不可能出现
个完美无瑕的产品，但是作为软件工程师和软件测试工程师，肯定希望自己参与开发的产
品稳定、易用、并且能够受到用户的好评；希望自己参与的产品能够满足当前大多数人的需
求，是否更合理呢？我相信通过软件工程师、测试工程师以及质量保证人员等的不断努力，
我们的软件产品会让用户感到满意的。
2.白盒测试
白盒测试（White-box Testing)，是另一种软件测试的主要方法，叉称为结构测试、逻辑
驱动测试或基于程序本身的测试，它着重于程序的内部结构及算法，通常不关心功能与性能
指标。软件的白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看做一
个打开的盒子，它允许自盒测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试
用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预
期的状态一致。自盒测试是一种基于对源代码中的控制结构、处理过程等进行分析，检耷程
序内部处理是否正确、包括异常处理、语句结构、分支、循环结构等。很多控制软件，还要
考虑有无冗余的代码，因为程序运行时，可能进入这些代码而无法再进行正常的执行（如进
入了死循环状态，程序永远无法终止）。这种测试要求测试人员对程序的理解能力和编码能力
很高，
筋要了
解程序的构架，具体需求，以及一些编写程序的技巧，能够检查一些程序规范，
指针、
、麥量、
数组越界等问题，使得问题在前期就暴路出米。
白盒测试一
般是以单元或者模块为基础的。且前的做法是把它归结为开发的范畴。通常
由资深的程序员、
专职的白盒测试人员或利用专业的代码分析工具，如 Boundchecker JtestC++
Test 等工具，
这些工具可以帮助开发人员发现变量没有初始化，空指针、内存泄露以及代码
不规范等问题。
白盒测试的主要方法包括。
语向覆盖：使得程序中每个语句全少都能被执行一次。
判定覆盖：使得程序中每个判定全少为真或假各一
旁
条件覆盖：使得判定甲的每个条件获得各种可能的结果。





504 第三部分 实战篇
13.1
性能测试在企业中的应用
量体裁衣
个估计访问量有百万用户的门户网站代码编写完成了。进行功能测试，运行效果良好，
项目组开发算大功告成。在产品的演示会上，风险投资商提出了一个问题
“这个网站能
支持多少用户同时在线啊？”，若项目经理说：“我们还没有进行这方面的测试。”会场啡然…••
13.1.1 性能测试介绍
只进行功能测试，而不进行性能测试，
，对一个拥有百万用户访问量的门户网站来说，无
疑是一个离成功还差一步的项目。一个好的网站(软件）应该是性能稳定的，经得起考验的。
那么什么是性能测试呢？
1. 性能测试的概念及种类
性能测试是为描述测试对象与性能相关的特征并对其进行评价，而实施和执行的一类测
试。它主要通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性
能指标进行测试。通常大家把性能测试、负载测试、压力测试统称为性能测试。
负载测试-
通过逐步增加系统负载，测试系统性能的变化，并最终确定在满足系统的
性能指标情况下，系统所能够承受的最大负载量的测试。
压力测试
通过逐步增加系统负载，测试系统性能的变化，并最终确定在什么负载条
件下系统性能处于失效状态，用以获得系统能提供的最大服务级别的测试。
性能测试的工具介绍
（1开源工具
开源工具以其源代码开放、针对性强、小巧灵活、免费的特性吸引着越来越多的企业和
个人投入到开源项目研发当中。IBM投资 1000万的 Eclipse 无疑是最为吸引人的开源项目。
伴随着开源项目的蓬勃发展，很多非常优秀的开源性能测试工具也纷纷出炉，如 Jmeter、
OpenSTA、DBMonster、 TpTest 等，具体介绍如表13-1 所示，
表 13-1
开源性能测试工具介绍
工具名称
Jmeter
OpenSTA
DbMonster
TpTest
功能简介
Jmeter 可以完成针对静态资源和动态资源 （Servlets、 Perl 脚本、Java 对象、数据查询、FTP 服务等）
的性能测试、可以模拟大量的服务器负载、网络负载、软件对系负载，通过不同的加载类型全面测试
软件的性能、提供图形化的性能分析
OpenSTA 可以模拟大量的虚拟用户、结果分析、虚扒用户响应时间、Wcb 服务器的资源使用情况、数
据库服务器的使用情况，可以精确地度量负载测试的结果
DBMonster 是一个生成随机数据，用来测试 SQL 数据库的压力测试工具
TpTest 提供测试 Internet 连接速度的简单方法
第13 章 性能测试实战策路
505
（2）商业工具。
商业工具以其界面美观、功能强大、操作方便、插件种类多、统计分析项丰富、直观，
同时提供产品的定期或者不定期的升级以及技术支持服务等优势，广泛地应用于各个企业。
目前比较流行的商业性能测试工具也非常多，如 Meroury LoadRunner、IBM Rational
Performance Tester(RPT)等工具，具体介绍如表 13-2所示，
表 13-2
商业性能测试工具介绍
工具名称
Mercury LoadRunner
功能简介
Mercury LoadRunner 是一种预测系统行为和性能的工业级标准性能测试负教测试工具。
通过模拟上千万用户实施并发负我及实时性能监测的方式来确认和查找问题，
LoadRunner 能够对整个企业架构进行测试。支持 Web(CHITTP/HTML)、 Windows Sockets.
File Transfer Protocol(FTP)、 Media PlayerMMS)、ODBC、 MS SQL Server 等协议
适用于团队验证 Web 应用程序的可伸缩性的负载和性能测试工具，引入了新的技
术进行负载测试的创建、修改、执行和结果分析
IBM Rational Performance Tester
（3）免费工具。
免费工具以其界面美观、免费使用、统计分析项较多、操作较方便等优点也吸引了很多
的企业应用这类软件，比较出名的免费性能测试工具有 Microsoft Application Center Test、
Microsoft Web Application Stress Tool，具体介绍如表 13-3所示
表 13-3
免费性能测试工具介绍
工具名称
Microsoft Application Center Test
Microsoft Web Application Stress
Tool
它可以对 Web 服务器进行强度测试，分析 web 应用程序（包括 ASPX 页及其
使用的组件，的性能和可伸缩性问题。通过打开多个服务器连接并迅速发送
HTTP 请求，Application Center Test 可以模拟大量用户并发操作
由微软公司的网站测试人员所开发，专门用来进行实际网站压力测试的一套工
具。可以数种不同的方式建立测试指令：包含以手动、录制浏览器採作步骤或
直接录入 IS 的记录文件、录入网站的内容及录入其他测试程序的指令等方式
13.1.2 性能测试在软件企业的应用
随着软件行业的不断发展，越来越多的企业更加重视产品的质量。性能测试已经成为软
件质量保障的一个重要因素。
一个软件性能的优劣很有可能直接决定一个软件的成败，甚至
一个企业的兴衰。每个软件企业都有各自不同的应用领域，有着不同的实际情况，这样必然
安求每个企业量体裁衣，选择适合自己的应用策略。
中1•大型企业、大型项目的应用策咯
大型企业应用的软件系统，业务比较复杂、用户数很多、存在并发情况、业务的响应时
回、操作的实时性、 稳定性、安全性、可恢复性等都要求很高，

506 第三部分 实战篇
像银行、电信、铁路等大型企业一股通过 CMMI、ISO 等认证，企业拥有先进的管理模
式、人员储备丰富、实力雄厚，在沙足的领城基本处于不可城动的地位。这些行业对性能的
要求很高。在此仅半一个铁路售票系统的例子：每途春节、五一、十二，相信坐火车回家探
亲或度假的朋友一定身有体会。在火车站、车票零售点，人海茫茫，
- 望无际，此时火车售
票系统正在经受着巨大的性能考验。全市几百个售票网点同时紧张忙傢工作。售票过程一般
分为两步，首先根据购票者提供的要出行的日期、车次和目的地进行相关查询，然后在有票
的情況 下，收取现金，打印出相应的车票交付给购票者。一个看起来简单的两个步骤，但当
成白上于的终端同时执行时，情况就复杂了。如此众至的交易同时发生，对应用程序本身
操作系统、中心数据库服务器、中间件服务器、网络设备的承受力都是一个严峻的考验。由
这些行业的性质决定了决策者不可能在发生问题后才考感系统的承受力，预见并发承受力，
是这些行业应该考虑的一个很重要的问题。
鉴于大型企业资金雄厚、管理规范、人员分工明确，笔者认为主要可以有两种方式解决
大型企业的性能测试问题
（1解缺方茶一：构建自己的性能测试团队。
组建由性能测试专家、数据库专家、网络专家和系统软件管理员以及资深的程序员（有
的公司还有业务专家）构成的性能测试团队。性能测试团队是一个独立的部门，在进行性能
测试时，需要制订详细的性能测试计划、测试设计、测试用例，而后依据测试用例执行性能
测试、分析性能测试结果，提出性能调整建议、书写性能测试总结报告。在工具的选用方面，
建议选择商业性能测试工具，它们具有强大的功能、 丰富的统计分析项，如 Mercury
LoadRunner 和IBM Rational Performance Tester 等工具还提供了专门的插件可以集成到 IDE
中，可以做粒度很细的工作，如看某个算法的执行时间、某个存储过程的执行时间、甚至某
个语句的执行时问等。这些优势无疑为专家们定位系统问题提供了很好的依掂
（2）解决方案二：专业性能测试机构为系统测试。
如果企业没有自己的性能测试部门，请专业的性能测试机构为系统做测试也是一个好办
法。专业软件测试机构具有成熟的测试流程和测试方法，由有丰富的工作经验的性能测试工
程师进行测试并提交专业的性能分析报告，可极大地提高测试有效性，还可保证测试的独立
性、公正性，避免了部门之间产生矛盾或摩擦：
2.中型企业、中型项目的应用策略
中型应用的软件系统，业务比较复杂、用户数较多、存在并发情况，对业务的响应时间、
稳定性等都有一定的要求，
中型企业一般通过ISO 认证，企业拥有比较先进的管理模式、有一定的人员储备、较强
实力，在涉足的领域有比较有名气，对性能的要求比较高。在此仅举一
个汽车配件查询系统
的例子：该系统提供近千家的汽车配件信息，通常有50~120 人在线。用户操作的最多的就
是查询厂家及其配件信息的操作。这是一个典型的中型项目。用户并发数量不是很大，涉区
频繁的查询操作，对系统的响应时间和系统的稳定性要求比较高。
第13章 性能测试实战策路|507
监于中型企业有较强实力、管理较规范，笔者认为主要可以有3种方式解决中型企业的
性能测试问题。
（1）解决方案一：临时组建性能测试团队，
在测试部门和开发部门临时组建由资深的程序员、资深的测试员、数据库专家、网络专
家和系统软件管理员构成的性能测试团队。性能测试团队不是一个独立的部门，分别由業瓜
于开发、测试等部门的专家构成。在进行性能测试时，需要制订详细的性能测试计划、鬨试
用例，然后依据测试用例执行性能测试、分析性能测试结果，提出性能调整建议、书写性化
测试总结报告。在工具的选用方面，建议选择商业性能测试工具，购买单协议的 Mereury
LoadRunner、IBM Rational Performance Tester 等工具。也可以选择开源的性能测试工具，如
Jmeter、OpenSTA 等。还可以选择免费的性能测试工具，如 Microsof Wcb Application Stress Tool
或 Microsoft Application Center Test。 但是无论是开源工具还是免费的测试工具，因为这些工
具为非商业工具，它们使用的熟悉过程时间长、统计分析项不是十分丰富以及产品的后期升
级和技术支持没有保证都应该成为企业考志的内容，
(2）解决方案二：自行编写测试程序。
对于特定的模块或者插件也可以进行针对性进行代码编写，进行相关性能测试。在此我仅
举一个例子，笔者在开发一个汽车定损行业管理软件时，系统需要以 FTP 方式传送汽车损坏情
况照片，决定采用第三方提供的 FTP 服务器组件。需要对该 FTP 服务组件进行系统稳定性和
并发性测试。经过项目组协商决定采用自行编写多线程程序模拟多个客户端进行不间断的持续
FTP 上传和下载操作。自行编写测试程序也不失为另一种性能测试的方法，但是在进行程序编
写的时候，
一定要注意所应用的组件是否是线程安全的，如果线程不安全将会出现问题
(3）解决方案三：专业性能测试机构为系统测试
如果在时间紧、任务重以及在企业条件允许的情況下，请专业的性能测试机构为系统做
测试也不失为一个办法，其优势不再资述。
3.小型企业、小型项目的应用策略
小型应用的软件系统，业务比较简单、用户数也不是很多、存在并发情况，对业务的响
应时间、稳定性等都有一定的要求。
在此仅举一个进销存管理系统的例子：该系统为一个大型商场对日常进销存业务的管理
通常有10~30 人应用此系统。用户操作的最多的就是查询与销售商品的操作。这是一个典型
的中、小型项目。用户并发数量不大，涉及频繁的查询和出库操作，对系统的响应时间和系
统的稳定性有一定要求
笔者认为主要可以有两种方式解决小型企业的性能测试问题。
（1）解决方案一：临时组建性能测试团队。
临时组建由资深的程序员、数据库专家、网络专家和系统软件管理员构成的性能测试团
队，有的公司可能存在上述提及人员不完路的情识，那么可以针对项目的重要程度，适当增
加相应的专家人员。性能测试团队不是一个独立的部门，分别由莱属于开发等部门的专家构
•成。在进行性能测试时，需要制订 详细的性能测试计划、测试用例，然后依据测试用例执行
性能测试、分析性能测试结果，提出性能调整建议、书写性能测试总结报告。在工具的选用
方面，可以考虑选择商业性能测试工具，购买单协议的 Mercury LoadRunner、IBM Rational
Performance Tester 等工具、或者购买具有一个月或者几个月许可协议的商业性能测试工具。
也可以选择适合项目的开源、免费性能测试工具。
（2）解决方案二：专业性能测试机构为系统测试。
如果在时问紧、任务重或者软件性能测试要求较高的情况下，请专业的性能测试机构为
系统做测试也不失为一个办法，其优势不再贺达
13.1.3 总结
以上策略是一个普遍的应用于大、中、小企业以及大、中、小项目进行性能测试的应用
策略，并不见得大公司就不做小项目，而小公司就不可以承揽大型项目，每个企业应该根据
企业的实际情况和项目的规模，选择行之有效的性能测试团以组建形式和具体的解决方案来
成功完成性能测试工作。
13.2 开发环境下的性能测试





W.L:
522| 第三部分
实战篇
这时相关开发人员、数据库管理员、系统管理员、网络管理员等就需要被据性能测试分析人员
提出的意见，同性能分析人员共同分析确定更细节的内容，相关人员对系统进行调整以后，性
能测试人员继续进行第二轮、第三轮…•的测试，与以前的测试结果进行对比，从而确定经过
调整以后系统的性能是否有提升。有一点需要提醒大家，就是在进行性能调整的时候，最好一
次只调整一项内容或者一类内容，避免一次调路多项内容而引!起性能提高却不知道是由于调整
哪项关键指标而改善性能的。那么在进行系统的调优过程中是香有什么好的策略米指导我们工
作呢？经过多年的工作实践，作者总结的经验是，按照由易到难的顺序对系统性能进行调优。
系统调优由易到难的先后顺序如下。
（1便件问题。
（2）网络问题。
（3）应用服务器、数据库等配置问题，
（4）源代码、数据库脚本问题
（5）系统构架问题。
硬什发生问题是最显而易见的，如果 CPU 不能满足复杂的数学逻辑还算，可以考虑更
换CPU：如果硬盘容量很小，承受不了很多的数据可以考虑更换高速、大容量硬盘：如果网
络带宽不够，可以考志对网络进行升级和改造，将网络更换成高速网络；还可以将系统应用
与平时公司日常应用进行隔离等方式，达到提高网络传输速率的目的。很多情况下，系统性
能不是十分理想的一个重要原因就是，没有对应用服务器、数据库等软件进行调优和设置引
起的，如调整 Tomcat 堆内存和扩展内存的大小，数据库引入连接池技术等。当源代码、数据
库脚本在上达调整无效的情况 下，可以选择的一种调优方式，但是由于涉及对源代码的改变
有可能会引入缺陷，所以在调优以后，不仅需要对性能的测试还要对功能进行验证，以确定
源代码的改变是否正确。这种方式需要通过对数据库建立适当的索引，以及运用简单的语句
替代复杂的语句，从而达到提高 SQL 语句运行效率的作用，还可以在编码过程中选择好的算
法，减少响应时间，引1入缓存等技术。最后，在上述尝试都不见效的情况下，就需要考虑现
行的构架是否合适，
选择效率高的构架，
但由于构架的改动比较大，所以应该慎重对待。
13.4
性能测试中有很多非常重要的概念，
如吞吐量、最大并发用户数、最大在线用户数等。
有很多读者也非常关心，如何针对自身的系统确定当前系统，在什么情况下就可以满足系统
吞吐量、并发用户数等指标要求，下面针对这些概念加以介绍。
13.4.1 吞吐量计算公式
香吐量 (Throughput)：指的是单位时间内处理的客户端请求数量，直接体现软件系统
第 13童
性能测试实战策路523
的性能承载能力。通常情况 下，吞吐最用“请求数/s”
或者 “页面数/s”
度水看，吞吐量也可以用“业务数1”、“业务数/天”、“访问人数/天”、“页面访问量/天，
，来衝量。以业务角
衡量。从网络角度来看，还可以用“字节数1”、“字节数/天” 等来衡量网络的流量，
米
吞吐量是大型门户网站以及各种电子商务网站衡量自身负载能力的一个很重要的指标，
一般吞吐量越大，系统单位时间内处理的数据越多，系统的负载能力也越强。
吞吐量是衡量服务器承受能力的重要指标。在容量测试中，吞吐量是一个重点关注的指
标，因为它能够说明系统的负载能力。而且，在性能调试过程中，吞吐量也具有非常重要的
价值，例如，Empirix 公司在报告中声称，在他们所发现的性能问题中，有 80%是因为吞吐
的限制而引起性能问题。
显而易见，吞吐量指标在性能测试中占有着重要地位。那么吞吐量会受到那些因素影响，
该指标和虚拟用户数、用户请求数等指标有何关系呢？吞吐量和很多因素有关，如服务器的
硬件配置，网络的拓扑结构，网络传输介质，软件的技术架构等。此外，吞吐量和并发用户
数之间存在一定的联系。通常在没有過到性能瓶颈的时候，吞吐量可以采用下面的公式计算：
F-MpuXR
这里，『表示吞吐量： Npu表示并发虚拟用户个数(Concurrency Virual User， 并发虚拟
用户)，R 表示每个 VU 发出的请求数量，7表示性能测试所用的时间。但如果過到了性能瓶
颈，此时吞吐量和 VU 数量之问就不再符合给出公式的关系。
13.4.2 并发数量计算公式
并发 (Concurrency)：它最简单的描述就是指多个同时发生的业务操作。例如，100 个用
户同时单击登录页面的 “登录”按钮操作。通常，应用系统会随着用户同时应用某个具体的
模块，而导致资源的争用问题，例如，50个用户同时执行统计分析的操作，由于统计业务涉
及很多数据提取以及科学计算问题，所以这个时候很有可能内存和 CPU 会出现瓶颈。并发性测
试描还的是多个客户端同时向服务器发出请求，考察服务器端承受能力的一种性能测试方式。
有很多用户在进行性能测试过程中，对“系统用户数”、“在线用户数”、“并发用户数”
概念不是很清楚，这里我们举一个例子来对这几个概念进行说明。假设有一个综合性的网站，
用户只有注册后登录系统才能够享有，新闻、论坛、博客、免费信箱等服务内容。通过数据
库统计可以知道，系统的用户数量为 4000 人，4000即为 “系统用户数”。通过操作日志我们
可以知道，系统最高峰时有 500 个用户同时在线，关于在线用户有很多第三方提供插件可以
进行统计，这里以 http://www.51.la 为例，这里“在线用户数”即为 500。这 500个用户的需
求肯定是不尽相同的，有的人喜欢看新闻、有的人喜欢写博客、收发邮件等。这里假设这 500
个用户中有70%在论坛看邮件、站子、新闻以及他人博客的文章（有一点需要提醒大家的是，
“看”这个操作是不会对服务器端造成压力的)：有10%在写邮件和发布站子 （用户仅在发达

W.L:
524| 第三部分 实战篇
或者提交写的邮什或者发布新贴的时候，才会对系纷服务器湖造成压力），有10%的用户什
么都没有做：有10%0的用户不得的从一个页面跳到另一个页面。企飞和场款下，通常我们说
有10%的用户真正对服务器构成了压力 （即 10%不停地在网页间此转的用户），板端情況下
可以把写邮件和发布站子的另外10%的用户加上 （此时假设这些用户不间断的发送邮什或发
布帕子），也就是说此时有 20%的用户对服务器造成压力。从上面的例子可以看出，服务器
张受的压力不仅取决于业务并发用户数，还取饮于用户的业务场景。
那么如何获得在性能测试过程中大家都很关心的并发用户数的数值呢？ 这里我们给出
《软件性能测试过程详解与案例剖析》 一书中的一些用于估算并发用户数的公式。
C=•
È
(1)
CH=C+3VC
(2)
在公式（1）中，C是平均的并发用户数；n是 login session 的数量：工是 login session 的
平均长度;7指考察的时间段长度。
公式（2）则给出了并发用户数峰值的计算公式，其中，C"指并发用户数的峰值，C就
是公式（1）中得到的平均的并发用户数。该公式的得出是假设用户的 login session 产生符合
泊松分布而估算得到的。
下面给出一个实例来讲述公式的应用。假设有一个OA 系统，该系统有 3000个用户，平
均每天大约有 400个用户要访问该系统，对一个典型用户来说，一天之内用户从登录到退出
系统平均时间为 4h，在一天的时间内，用户只在8小时内使用该系统。则根据公式(1）和
公式（2），可以得到C=400×4/8=200 公式（1）， C=200+3×V200 =242 公式 (2）。
除了上述方法以外，还有一种应用更为广泛的估算方法，当然这种方法的精度较差，这种
公式的计算是由平时经验的积累而得到，相应经验公式为：C=n/10 公式（3）和CH=+xC
公式（4)。通常，用访问系统用户最大数量的 10%作为平均的并发用户数，并发用户数的最
大数量可以通过在并发数上乘以一个调整因子工得到，工的取值在不同的行业可能会有所不
同，通常r的取值为2~3。系统用户最大数量可以通过系统操作日志或者系统全局变量分析
得到，在没有系统日,志等手段得到时，也可以根据同类型的网站分析、或者估算得到（当然
这种方法存在看一定的偏差，读者应该酌情选择)，现在有很多网站提供非常好的网站访问量
统计，如 http://www.51.la（我要啦免费统计网站），用户可以申请一个账户，而后把该网站提
供的代码联入到网站，就可以通过访问“我要啦免费统计网站”
来查看每天的访问量、每月
的访问量等信息。「(调整因子）的确定不是一朝一夕就可以得到，通常需要根据多次性能测
试的数据，才能够确定比较谁确的取值。所以，大家在平时进行并发测试过程中，一定要汪
意数据的积累，针对本行业的特点，确定一个比较合理的，值。如果能知道平均每个用户发
出的请求数量 （假设为么），则系统接受的总的请求数量就可以通过uxC 估算出来，这个值
也就是我们平时所说的吞吐量。
* 13 #
52
13.4.3
思考时间计算公式
思考时间 （Think Time)：它就是在录制脚本过程中，每个请求之间的时间间隔，也就是
操作过程中，停顿的时间。在实际应用系统时，不会-
一个接一个的不停的发送请求，通常在
发出一个请求以后，都会停顿一定的时间，来发送下一个请求。
为了真实的描述用户操作的实际场景，
在录制脚本的过程中，通常，LoadRunner 也会录
制这些思考时间，在脚本中 Ir think time0函数就是实现前面所说的思考时间，它实现了在两
个请求之间的停顿。
在实际性能测试过程中，作为一名性能测试人员，可能非常关心怎样设置思考时间才能
够跟实际情况最合理。其实，思考时间与选代次数、并发用户数以及吞吐量存在一定的关系。
如F= puXG公式（5）说明吞吐量是 VU 数量入vu，每个用户发出请求致尺和时间
了的的致，而其中的尺又可以人用时间7和用户的恩考时间工，北计算得出，R一元，公式 （62
用公式（5）和公式（6）进行化简运算可得，吞吐量与 Nvu 成正比，而与工，成反比。
那么，究竞怎样选择合适的思考时间呢？下面给出一个计算思考时间的一般步骤。
(1）首先计算出系统的并发用户数：
（2）统计出系统平均的吞吐量。
（3）统计出平均每个用户发出的请求数量。
（4）根据公式（6）计算出思考时间。
为了使性能测试的场景更加符合真实的情况，可以考虑在公式（6）的基础上再乘以一个
比例因子、或者指定一个动态随机变化的范围来仿真实际情说。
经常会看到有很多做性能测试对是否引入思考时间在网络上的争论，在这里笔者认为
思考时间是为了模拟真实的操作而应运而生，所以如果您要模拟真实场景的性能测试建议
还是应用思考时间。但是，如果要考察一个系统能够处理的压力
救限处理能力，则可
以将思考时间删除或者注释掉，从而起到最大限度的发送请求，考察系统极限处理能力的
目的。
